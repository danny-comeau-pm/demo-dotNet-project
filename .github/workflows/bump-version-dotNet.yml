name: Bump Version - .NET Project

run-name: Bump version - requested by ${{ github.actor }}

on:
  # allow the workflow to be triggered manually
  workflow_dispatch:
    inputs:
      bumpType:
        description: 'Bump Type (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

  # allow the workflow to be called from another workflow
  workflow_call:
    inputs:
      bumpType:
        required: true
        type: string

env:
  ACTOR_USER_NAME: ${{ github.actor }} # --------------------------------------------- the name of the user who triggered the workflow
  BUMP_TYPE: ${{ inputs.bumpType }} # ------------------------------------------------ the type of version bump (major, minor, or patch)
  REPO_NAME: ${{ github.event.repository.name }} # ----------------------------------- the name of the repository (name only, without owner) e.g. for plantemoran-appdev/my-repo, this would be my-repo
  REPO_OWNER: ${{ github.repository_owner }} # --------------------------------------- the owner of the repository (owner or organization name) e.g. for plantemoran-appdev/my-repo, this would be plantemoran-appdev
  GITHUB_BOT_USER_NAME: github-actions[bot] # ---------------------------------------- the name of the GitHub bot user
  GITHUB_BOT_USER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com # ----- the email address of the GitHub bot user

jobs:
  # generate variables needed for the version bump
  # this includes:
  # - new branch name (e.g. feature/username-version-bump--1.2.4)
  # - new version name (e.g. v1.2.4)
  # - new version number (e.g. 1.2.4)
  generate-variables:
    name: Generate variables
    runs-on: ubuntu-latest
    outputs:
      newBranchName: ${{ steps.generate-branch-name.outputs.newBranchName }}
      newVersionName: ${{ steps.generate-new-version-number.outputs.newVersionName }}
      newVersionNumber: ${{ steps.generate-new-version-number.outputs.newVersionNumber }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get current version numbers
        id: get-current-version-numbers
        run: |
          # Find the .csproj file
          csprojFile=$(find . -type f -name "*.csproj" | head -n 1)
          echo "CSProj file: $csprojFile"
      
          # Get the current version number from the .csproj file
          currentVersion=$(cat "$csprojFile" | grep '<VersionPrefix>' | head -n 1 | sed 's/.*<VersionPrefix>\(.*\)<\/VersionPrefix>.*/\1/')
      
          # split the current version number into individual major, minor, and patch components
          versionArray=(${currentVersion//./ })
          versionMajor="${versionArray[0]}"
          versionMinor="${versionArray[1]}"
          versionPatch="${versionArray[2]}"

          echo $versionMajor
          echo $versionMinor
          echo $versionPatch
      
          # output the current version number and its parts
          echo "currentVersion=$currentVersion" >> "$GITHUB_ENV"
          echo "versionMajor=$versionMajor" >> "$GITHUB_ENV"
          echo "versionMinor=$versionMinor" >> "$GITHUB_ENV"
          echo "versionPatch=$versionPatch" >> "$GITHUB_ENV"


      - name: Generate new version number
        id: generate-new-version-number
        run: |
          bumpType=${{ env.BUMP_TYPE }}
          versionMajor="${{ env.versionMajor }}"
          versionMinor="${{ env.versionMinor }}"
          versionPatch="${{ env.versionPatch }}"
      
          # bump the version number based on the bump type
          if [ "$bumpType" = "major" ]; then
            newVersionNumber="$((versionMajor + 1)).0.0"
          elif [ "$bumpType" = "minor" ]; then
            newVersionNumber="$versionMajor.$((versionMinor + 1)).0"
          elif [ "$bumpType" = "patch" ]; then
            newVersionNumber="$versionMajor.$versionMinor.$((versionPatch + 1))"
          else
            echo "ERROR: Invalid version bump type!"
            exit 1
          fi
      
          # output the new version number and name
          echo "newVersionNumber=$newVersionNumber" >> "$GITHUB_OUTPUT"
          echo "newVersionName=v$newVersionNumber" >> "$GITHUB_OUTPUT"


      - name: Generate branch name
        id: generate-branch-name
        run: |
          # generate the name of the new branch
          # this will be used to push the updated csproj file and create a pull request
          echo "newBranchName=feature/${{ env.ACTOR_USER_NAME }}-version-bump--${{ steps.generate-new-version-number.outputs.newVersionNumber }}" \
          >> "$GITHUB_OUTPUT"

      # this is technically not necessary, but it's useful for debugging
      - name: Print variables to console
        run: |
          echo current version is: ${{ steps.get-current-version-numbers.outputs.currentVersion }}
          echo major version is: ${{ steps.get-current-version-numbers.outputs.versionMajor }}
          echo minor version is: ${{ steps.get-current-version-numbers.outputs.versionMinor }}
          echo patch version is: ${{ steps.get-current-version-numbers.outputs.versionPatch }}
          echo new version number is: ${{ steps.generate-new-version-number.outputs.newVersionNumber }}
          echo new version name is: ${{ steps.generate-new-version-number.outputs.newVersionName }}
          echo new branch name is: ${{ steps.generate-branch-name.outputs.newBranchName }}

  bump-version-and-create-pr:
    name: Bump version and create pull request
    runs-on: ubuntu-latest
    needs: generate-variables
    env:
      NEW_BRANCH_NAME: ${{ needs.generate-variables.outputs.newBranchName }}
      NEW_VERSION_NAME: ${{ needs.generate-variables.outputs.newVersionName }}
      NEW_VERSION_NUMBER: ${{ needs.generate-variables.outputs.newVersionNumber }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update .csproj version
        run: |
          # Find the .csproj file
          csprojFile=$(find . -type f -name "*.csproj" | head -n 1)
          echo "CSProj file: $csprojFile"
      
          # Update the version number in the .csproj file
          newVersion="${{ env.NEW_VERSION_NUMBER }}"
          if [[ -z "$newVersion" ]]; then
            echo "New version number is empty!"
            exit 1
          fi
      
          echo "Updating version to $newVersion in $csprojFile"
          sed -i "s/<VersionPrefix>.*<\/VersionPrefix>/<VersionPrefix>$newVersion<\/VersionPrefix>/" "$csprojFile"
          
          # Optional: Check the result (for debugging)
          grep "<VersionPrefix>" "$csprojFile" 


      - name: Commit and push changes
        run: |
          # create a new branch with the newly generated branch name
          # this will be used to commit the updated package.json and package-lock.json files
          git config --global user.name ${{ env.GITHUB_BOT_USER_NAME }}
          git config --global user.email ${{ env.GITHUB_BOT_USER_EMAIL }}
          git checkout -b ${{ env.NEW_BRANCH_NAME }}
          git add .
          git commit -m "Bump version to ${{ env.NEW_VERSION_NUMBER }}"
          git push --set-upstream origin ${{ env.NEW_BRANCH_NAME }}

      - name: Create pull request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr create \
            --base develop \
            --head ${{ env.NEW_BRANCH_NAME }} \
            --title "Bump version to ${{ env.NEW_VERSION_NAME }}" \
            --body "Bump version to ${{ env.NEW_VERSION_NAME }} by @${{ env.ACTOR_USER_NAME }}"
